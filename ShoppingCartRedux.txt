To integrate static shop items from an `assets.js` file with Redux Toolkit, you can follow these steps. Redux Toolkit simplifies Redux usage and is generally recommended for new Redux projects due to its streamlined API and built-in best practices.

Here’s a step-by-step guide to managing your shop items and implementing a shopping cart using Redux Toolkit:

### **1. Prepare Your Assets File**

Ensure your `assets.js` file exports your shop items correctly. For example:

```javascript
// assets.js
const shopItems = [
  { id: 1, name: 'Item 1', price: 100 },
  { id: 2, name: 'Item 2', price: 150 },
  { id: 3, name: 'Item 3', price: 200 },
];

export default shopItems;
```

### **2. Set Up Redux Toolkit**

#### **2.1. Install Redux Toolkit and React-Redux**

If you haven’t installed these yet, you can do so with:

```bash
npm install @reduxjs/toolkit react-redux
```

#### **2.2. Create a Redux Slice for Shop Items**

Create a slice for managing your shop items. In Redux Toolkit, you use slices to define actions and reducers in one place.

```javascript
// features/shop/shopSlice.js
import { createSlice } from '@reduxjs/toolkit';
import shopItems from '../../assets'; // Import items from assets

const shopSlice = createSlice({
  name: 'shop',
  initialState: {
    items: shopItems,
  },
  reducers: {
    // You can define actions related to shop items here
  },
});

export const selectItems = (state) => state.shop.items;
export default shopSlice.reducer;
```

#### **2.3. Create a Redux Slice for the Cart**

Create another slice for managing the shopping cart:

```javascript
// features/cart/cartSlice.js
import { createSlice } from '@reduxjs/toolkit';

const cartSlice = createSlice({
  name: 'cart',
  initialState: {
    items: [],
  },
  reducers: {
    addToCart(state, action) {
      const item = action.payload;
      const existingItem = state.items.find((i) => i.id === item.id);
      if (existingItem) {
        existingItem.quantity += 1;
      } else {
        state.items.push({ ...item, quantity: 1 });
      }
    },
    removeFromCart(state, action) {
      const id = action.payload;
      state.items = state.items.filter((item) => item.id !== id);
    },
    updateCartItem(state, action) {
      const { id, quantity } = action.payload;
      const item = state.items.find((i) => i.id === id);
      if (item) {
        item.quantity = quantity;
      }
    },
  },
});

export const { addToCart, removeFromCart, updateCartItem } = cartSlice.actions;
export const selectCartItems = (state) => state.cart.items;
export default cartSlice.reducer;
```

#### **2.4. Configure the Store**

Combine your slices and configure the Redux store:

```javascript
// app/store.js
import { configureStore } from '@reduxjs/toolkit';
import shopReducer from '../features/shop/shopSlice';
import cartReducer from '../features/cart/cartSlice';

const store = configureStore({
  reducer: {
    shop: shopReducer,
    cart: cartReducer,
  },
});

export default store;
```

### **3. Provide the Store to Your Application**

Wrap your application with the `Provider` component from `react-redux` and pass in the store:

```javascript
// index.js or App.js
import React from 'react';
import ReactDOM from 'react-dom';
import { Provider } from 'react-redux';
import store from './app/store';
import App from './App';

ReactDOM.render(
  <Provider store={store}>
    <App />
  </Provider>,
  document.getElementById('root')
);
```

### **4. Connect Components to Redux**

#### **4.1. Display Shop Items**

Create a component to display and add items to the cart:

```javascript
// components/ShopItems.js
import React from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { selectItems } from '../features/shop/shopSlice';
import { addToCart } from '../features/cart/cartSlice';

const ShopItems = () => {
  const items = useSelector(selectItems);
  const dispatch = useDispatch();

  const handleAddToCart = (item) => {
    dispatch(addToCart(item));
  };

  return (
    <div>
      <h1>Shop Items</h1>
      <ul>
        {items.map((item) => (
          <li key={item.id}>
            {item.name} - ${item.price}
            <button onClick={() => handleAddToCart(item)}>Add to Cart</button>
          </li>
        ))}
      </ul>
    </div>
  );
};

export default ShopItems;
```

#### **4.2. Display Cart Items**

Create a component to display and manage cart items:

```javascript
// components/Cart.js
import React from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { selectCartItems, removeFromCart, updateCartItem } from '../features/cart/cartSlice';

const Cart = () => {
  const cartItems = useSelector(selectCartItems);
  const dispatch = useDispatch();

  const handleRemove = (id) => {
    dispatch(removeFromCart(id));
  };

  const handleQuantityChange = (id, quantity) => {
    dispatch(updateCartItem({ id, quantity }));
  };

  return (
    <div>
      <h1>Shopping Cart</h1>
      <ul>
        {cartItems.map((item) => (
          <li key={item.id}>
            {item.name} - ${item.price} x {item.quantity}
            <button onClick={() => handleRemove(item.id)}>Remove</button>
            <button onClick={() => handleQuantityChange(item.id, item.quantity + 1)}>Increase Quantity</button>
            <button onClick={() => handleQuantityChange(item.id, item.quantity - 1)}>Decrease Quantity</button>
          </li>
        ))}
      </ul>
    </div>
  );
};

export default Cart;
```

### **Summary**

- **`assets.js`**: Contains static data for shop items.
- **Shop Slice**: Manages static items, can include actions to manipulate the list if needed.
- **Cart Slice**: Manages cart operations such as adding, removing, and updating items.
- **Store**: Combines reducers from different slices.
- **Components**: Use `useSelector` and `useDispatch` hooks to interact with the Redux store and display or update data.

By using Redux Toolkit, you leverage its powerful features to manage state in a more streamlined and maintainable way, making it easier to handle both shop items and shopping cart functionalities in your application.